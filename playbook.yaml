---
- name: PKI Management Playbook
  hosts: localhost
  connection: local
  gather_facts: false

  vars:
    # Default paths that can be overridden with environment variables
    ca_tree_file: "{{ lookup('env', 'CA_TREE_FILE') | default('./vars/ca-tree.yaml', true) }}"
    certificates_file: "{{ lookup('env', 'CERTIFICATES_FILE') | default('./vars/certificates.yaml', true) }}"
    artifacts_directory: "{{ lookup('env', 'ARTIFACTS_DIRECTORY') | default('./pki', true) }}"

  vars_files:
    - "{{ ca_tree_file }}"
    - "{{ certificates_file }}"

  tasks:
    - name: Display configuration paths
      debug:
        msg:
          - "CA Tree File: {{ ca_tree_file }}"
          - "Certificates File: {{ certificates_file }}"
          - "Artifacts Directory: {{ artifacts_directory }}"
      tags:
        - always

    - name: Ensure the cascade configuration includes the artifacts directory
      set_fact:
        pki_cascade_configuration: "{{ pki_cascade_configuration | combine({'__propagated': {'global_root_directory': artifacts_directory}}, recursive=True) }}"
      tags:
        - always

    - name: Initialize the PKI configuration dictionary
      khmarochos.pki.init_dictionary:
        pki_ca_cascade: "{{ pki_cascade_configuration }}"
      register: configuration_dictionary
      tags:
        - always

    - name: Retrieve the configuration dictionary result
      set_fact:
        configuration_dictionary: "{{ configuration_dictionary.result }}"
      tags:
        - always

    - name: Initialize the PKI cascade
      khmarochos.pki.init_pki:
        pki_ca_cascade: "{{ pki_cascade_configuration }}"
        save_forced: false
      register: pki_cascade
      tags:
        - always
        - pki

    - name: Issue or check all the certificates
      khmarochos.pki.issue_everything:
        pki_ca_cascade: "{{ pki_cascade_configuration }}"
        ca_nickname: "{{ cert_item.ca_nickname }}"
        certificate_parameters: "{{ cert_item.certificate_parameters }}"
      loop: "{{ certificate_parameters }}"
      loop_control:
        loop_var: cert_item
        label: "{{ cert_item.certificate_parameters.nickname }}"
      when: "'pki_only' not in ansible_run_tags"
      register: certificate_results
      tags:
        - always
        - certificates
